spring.application.name=jpa

# Para persistencia en memoria
# spring.datasource.url=jdbc:h2:mem:coderHouse

# Para persistencia en archivo en disco
spring.datasource.url=jdbc:h2:file:./data/coderHouse

# Especifica el driver de la base de datos que se utilizará para establecer la conexión.
# org.h2.Driver: Indica que la base de datos utilizada es H2, que es una base de datos embebida (in-memory/disk)
# muy común para entornos de desarrollo y pruebas en proyectos Spring Boot.
spring.datasource.driverClassName=org.h2.Driver

# Define el nombre de usuario que se utilizará para conectarse a la base de datos.
spring.datasource.username=coder
#  Define la contraseña correspondiente al usuario configurado anteriormente.
spring.datasource.password=coder

# Muestra las consultas SQL generadas por Hibernate en la consola o el log de la aplicación.
spring.jpa.show-sql=true

# Formatea las consultas SQL mostradas en el log para que sean más legibles.
spring.jpa.properties.hibernate.format_sql=true

# Habilita la consola web de H2, que permite interactuar con la base de datos H2 desde un navegador.
spring.h2.console.enabled=true

# Define la ruta en la que estará disponible la consola H2 en la aplicación.
# Valor /h2-console: La consola H2 estará disponible en la URL
# http://localhost:8080/h2-console (si el puerto es el 8080).
spring.h2.console.path=/h2-console

# Especifica el dialecto de Hibernate que debe utilizarse para la base de datos.
# 	Valor org.hibernate.dialect.H2Dialect: Indica que se está utilizando la base de datos H2,
#  lo que permite a Hibernate generar consultas SQL específicas y optimizadas para H2.
#  Cada tipo de base de datos (PostgreSQL, MySQL, Oracle, etc.) tiene su propio dialecto.
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.H2Dialect

# Controla cómo Hibernate maneja la creación y actualización de las tablas de la base de datos (DDL - Data Definition Language).
# Valor none: Indica que Hibernate no debe realizar ninguna acción automática sobre las tablas de la base de datos,
# es decir, no creará, actualizará ni eliminará tablas o columnas. Esto es útil en entornos de producción para evitar
# cambios no deseados en la estructura de la base de datos.
#	Otros valores posibles incluyen:
#	create: Crea las tablas al inicio y las elimina al apagar la aplicación.
#	update: Actualiza el esquema de la base de datos sin eliminar tablas.
#	create-drop: Crea las tablas al inicio y las elimina al apagar la aplicación.
#	validate: Solo valida el esquema, pero no realiza cambios.
spring.jpa.hibernate.ddl-auto=none

# Controla la ejecución automática de scripts SQL de inicialización cuando se arranca la aplicación.
# Valor always: Hace que Spring Boot siempre ejecute los scripts de inicialización SQ.
# Los scripts se buscan en la carpeta resources, en los archivos  schema.sql y data.sql.
spring.sql.init.mode=always